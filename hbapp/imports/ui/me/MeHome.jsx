import React, { Component } from 'react';
import { createContainer } from 'meteor/react-meteor-data';
import { Meteor } from 'meteor/meteor';
import _ from 'lodash';
import { Provider, connect } from 'react-redux';
import Store from '../../stores/store';
import { RaisedButton } from 'material-ui';
import { AppBar } from 'material-ui';
import { Card, CardMedia, CardHeader } from 'material-ui/Card';
import { Link } from 'react-router';

// import { lbl, getLanguage, setLanguage } from '/imports/intg/lang';

// style json
import JsonStyle from './me.json';
import Styler from '/imports/utils/Styler.js';

// Actions
import { userLogout } from '/imports/actions/user/userLogout';
import { aboutDialogAction } from '/imports/actions/utils/dialogAction';

class Me extends Component {

  constructor(props) {
    super(props);
    this.isUser = !!Meteor.userId();
    this.page = new Styler(JsonStyle);
  }

  shouldComponentUpdate(nextProps, nextState) {
    // console.log('should component update ?')
    // console.log(nextProps,nextState)

    // This prevents 1 render when data is not yet supplied. 
    if (nextProps.subReady == false) {
      return false;
    }
    return true;
  }

  componentWillReceiveProps(nextProps) {

  }

  logout() {
    this.props.dispatch(userLogout());
  }

  onMyFolder() {
    this.props.router.push('me/my_folder');
  }

  onReleasing() {
    this.props.router.push('me/offplan_lists/editing');
  }

  onMyOffPlansList() {
    this.props.router.push('/me/offplan_lists');
  }


  // 委托发布
  onReleasing() {
    this.props.router.push('/me/sublets_new');
  }

  onMyLocations() {
    this.props.router.push('/me/mylocations');
  }

  redirect(url) {
    this.props.router.push(url);
  }

  onVersionNum() {
    this.props.dispatch(aboutDialogAction({
      title: "版本号",
      message: Meteor.settings.public.APP_VERSION,
    }));
  }

  mySublets() {
    this.props.router.push('/me/sublets');
  }

  onCustomerService() {
    const url = 'http://kefu.easemob.com/webim/im.html?tenantId=' + Meteor.settings.public.KEFU_TENANT_ID;
    let ref = window.open(url, '_blank', 'location=yes');
    // cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    ref.addEventListener('loadstop', function () {
      // insert scrpt here to inject into the pop up window(InAppBrowser)
      // set cookie to be 'root**** = xxxxxx'
      //  **** is the Backend tenant id, xxxx is the autogenerated UserId on the backend. 

      // TODO: first , grab the generated User ID from cookie when first time open Kefu. 
      // save it in user's profile. 
      // every time when open new kefu window, check if user alr has Kefu Id, if has, replace it. 
      // this way, user will always use same account contacting kefu. 

      // first line is removing remembered user id, 
      // second line is setting new user id,
      // third line to refresh it 
      ref.executeScript({
        code: `document.cookie='root34459' + '=;Path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
       document.cookie='root34459=webim-visitor-8Y8PHG74YKVWHY3B72QJ'; 
       if(document.cookie != 'root34459=webim-visitor-8Y8PHG74YKVWHY3B72QJ'){
         location.reload();
       }
       `});
    });
    console.log(ref)
    // ref.close();
  }

  // changeLanguage() {
  //   if (getLanguage() === 'en') {
  //     setLanguage('zh');
  //   } else {
  //     setLanguage('en');
  //   }
  // }


  render() {

    // console.log(this.props);
    const avatar = Meteor.user() ? Meteor.user().profile.avatar : "/images/avatar-empty.png";
    // const username = Meteor.user() ? Meteor.user().username : 'Username';
    const phoneNum = Meteor.user() ? Meteor.user().phoneNum : '请登录';

    let container;
    if (this.isUser) {
      container = <div >
        <RaisedButton label="我的全球资产" className="commonRB firstRB"
          {...this.page.style("commonRB", "firstRB") }
          onClick={this.onMyFolder.bind(this)}
          icon={<i className="fa fa-globe commonIcon" {...this.page.style("commonIcon") } />} >
          <i className="fa fa-chevron-right commonRight"  {...this.page.style("commonRight") } ></i>
        </RaisedButton>
        <RaisedButton label="我的二手楼花" className="commonRB"
          {...this.page.style("commonRB") }
          onClick={this.onMyOffPlansList.bind(this)}
          icon={<i className="fa fa-home commonIcon" {...this.page.style("commonIcon") } />} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") }></i>
        </RaisedButton>
        <RaisedButton label="我的分租信息" className="commonRB"
          {...this.page.style("commonRB") }
          onClick={this.mySublets.bind(this)}
          icon={<i className="fa fa-home commonIcon" {...this.page.style("commonIcon") } />} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") }></i>
        </RaisedButton>
        <RaisedButton label="房源发布" className="commonRB"
          {...this.page.style("commonRB") }
          onClick={this.onReleasing.bind(this)}
          icon={<i className="fa fa-home commonIcon" {...this.page.style("commonIcon") } />} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") }></i>
        </RaisedButton>
        <RaisedButton label="我的地点" className="commonRB"
          {...this.page.style("commonRB") }
          onClick={this.redirect.bind(this, '/me/mylocations')}
          icon={<i className="fa fa-location-arrow commonIcon" {...this.page.style("commonIcon") } />} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") }></i>
        </RaisedButton>


        <RaisedButton label="版本号" className="commonRB textRB"
          {...this.page.style("commonRB", "textRB") }
          onClick={this.onVersionNum.bind(this)} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") }></i>
        </RaisedButton>
        <RaisedButton label="联系客服" className="commonRB textRB"
          {...this.page.style("commonRB", "textRB") }
          onClick={this.onCustomerService.bind(this)} >
          <i className="fa fa-chevron-right commonRight" {...this.page.style("commonRight") } />
        </RaisedButton>
        {/*
          <RaisedButton
            labelColor="#424242"
            buttonStyle={{ textAlign: "left", borderBottom: '#e3e3e3 solid 1px' }}
            labelStyle={{ fontSize: "16px", paddingLeft: "8px" }}
            label={lbl("language")}
            onClick={this.changeLanguage.bind(this)}
            style={{ width: '100%', height: "40px", lineHeight:  "40px" }}  >
            <i className="fa fa-chevron-right"
              style={{ position: "absolute", right: '8px', lineHeight:  "40px", fontSize: "16px" }} />
          </RaisedButton>
        */}
        <RaisedButton label="退出登录" className="loginoutRB"
          {...this.page.style("loginoutRB") }
          onClick={this.logout.bind(this)} />
      </div>

    } else {
      container = <div>
        <Link to='/user_login' >
          <RaisedButton label="点击登录" className="loginoutRB"
            {...this.page.style("loginoutRB") }
          />
        </Link>
      </div>
    }

    return (
      <div>

        <Card>
          <CardMedia
            overlay={<CardHeader title={phoneNum}
              className="cardHeader"
              avatar={avatar}
              onClick={() => {
                // goto profile setting page. 
              }}
              {...this.page.style("cardHeader") } />
            }
            {...this.page.style("cardMedia") }
          >
            <img src="/images/meBg.jpg" className="cardImg" {...this.page.style("cardImg") } />
          </CardMedia>
        </Card>
        <div className="divContainer" {...this.page.style("divContainer") }>
          {container}
        </div>
        {this.props.children}
      </div>
    );
  }
}


const MeContainer = createContainer(({ lists }) => {

  const userSub = Meteor.subscribe("userData");
  const userInfo = Meteor.user();

  return {
    lists,
    subReady: userSub.ready(),
    userInfo
  };

}, Me);

function mapStateToProps(state) {
  return {
    lists: state.lists,
  };
}

export default connect(mapStateToProps)(MeContainer);
